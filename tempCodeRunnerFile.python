import time
import matplotlib.pyplot as plt
import math

def is_safe(board, row, col, n, left_diagonal, right_diagonal, columns):
    # Check if the queen is safe from other queens in the column and diagonals
    if columns[col] or left_diagonal[row - col + (n - 1)] or right_diagonal[row + col]:
        return False
    return True

def solve_nqueens(board, col, n, solutions, left_diagonal, right_diagonal, columns):
    if col >= n:
        solutions.append([row[:] for row in board])  # Append a copy of the board
        return
    for i in range(n):
        if is_safe(board, i, col, n, left_diagonal, right_diagonal, columns):
            board[i][col] = 1
            columns[col] = True
            left_diagonal[i - col + (n - 1)] = True
            right_diagonal[i + col] = True

            solve_nqueens(board, col + 1, n, solutions, left_diagonal, right_diagonal, columns)

            # Backtrack
            board[i][col] = 0
            columns[col] = False
            left_diagonal[i - col + (n - 1)] = False
            right_diagonal[i + col] = False

def nqueens(n):
    board = [[0] * n for _ in range(n)]
    solutions = []
    left_diagonal = [False] * (2 * n - 1)
    right_diagonal = [False] * (2 * n - 1)
    columns = [False] * n
    solve_nqueens(board, 0, n, solutions, left_diagonal, right_diagonal, columns)
    return solutions

def plot_complexity():
    input_sizes = []
    theoretical_times = []
    practical_times = []

    # Measure for N from 4 to 15 for practical testing (larger N can be computationally expensive)
    for n in range(4, 11):
        input_sizes.append(n)

        # Theoretical time complexity: O(N!)
        theoretical_time = math.factorial(n)
        theoretical_times.append(theoretical_time)

        # Practical time complexity: Measure the time taken
        start_time = time.time()
        nqueens(n)
        end_time = time.time()
        practical_times.append(end_time - start_time)

    # Plotting both theoretical and practical time complexities
    plt.figure(figsize=(10, 6))
    plt.plot(input_sizes, theoretical_times, label='Theoretical Time Complexity (O(N!))', color='blue', linestyle='--')
    plt.plot(input_sizes, practical_times, label='Practical Time Complexity', color='red', marker='o')

    # No log scale for y-axis
    plt.xscale('linear')
    plt.yscale('linear')  # No log scale on y-axis
    plt.xlabel('Number of Queens (N)')
    plt.ylabel('Time Complexity (Seconds)')
    plt.title('Theoretical vs Practical Time Complexity for N-Queens Problem')
    plt.legend()
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    plot_complexity()
